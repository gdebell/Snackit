.DS_Store
node_modules/
npm-debug.log
*.env



//creates a roadmap centered over Denver
var map;
var storeCoordsArr;
function initMap() {
  var directionsService = new google.maps.DirectionsService();
  var directionsDisplay = new google.maps.DirectionsRenderer();
  map = new google.maps.Map(document.getElementById('map'), {
    zoom: 12,
    center: new google.maps.LatLng(39.7033,-105.00),
    mapTypeId: 'roadmap'
  });
  directionsDisplay.setMap(map);
  //ajax request to get long/lat of schools and stores in database
  $.ajax({
    type: 'GET',
    url: '/map/data',
    data: 'json'
  })
   .then((data) => {
    var listings = createMarkers(data);
    storeCoordsArr = findStoreCoords(listings.stores);

  })
   .fail((err) => {
    console.log(err);
  });

  //on submit, gets the start/end location from DOM
  $('.route').on('submit', (eve)=> {
    eve.preventDefault();
    const start = $('#startAddress').val();
    const end = $('#endAddress').val();
    findClosestStore(storeCoordsArr,start,end, directionsService)
  });
}

//puts school and store markers on the map from database
var locationListings;

function createMarkers (results) {
  locationListings = results;
  //create school markers
  var appleImage = {
    url: 'http://www.freeiconspng.com/uploads/apple-icon-19.png',
    scaledSize: new google.maps.Size(30, 30)
  };
  for (var i = 0; i < results.schools.length; i++) {
    var lat = parseFloat(results.schools[i].lat);
    var long = parseFloat(results.schools[i].long);
    var latLng = new google.maps.LatLng(lat,long);
    var marker = new google.maps.Marker({
      position: latLng,
      icon: appleImage,
      map: map
    });
  }
  //create store markers
  var storeImage = {
    url: 'https://cdn3.iconfinder.com/data/icons/map-markers-1/512/supermarket-512.png',
    scaledSize: new google.maps.Size(30, 30)
  };
  for (var j = 0; j < results.stores.length; j++) {
    var storeLat = parseFloat(results.stores[j].lat);
    var storeLong = parseFloat(results.stores[j].long);
    var latLngStore = new google.maps.LatLng(storeLat,storeLong);
    var markerStore = new google.maps.Marker({
      position: latLngStore,
      icon: storeImage,
      map: map
    });
  }
  return locationListings
}

var startAddress = document.getElementById('startAddress').value;
var endAddress = document.getElementById('endAddress').value;
var shortestTotalDistance = 100000000;
var shortestData;



function deleteMarkers(markersArray) {
  for (var i = 0; i < markersArray.length; i++) {
    markersArray[i].setMap(null);
  }
  markersArray = [];
}

function findClosestStore(storeListingArr, start, end, directionsService) {
  storeListingArr.forEach(function(el) {
    var first = new google.maps.LatLng(el.lat,el.lng);
    // console.log(first);
    var waypts = [{location: first, stopover: true}];
    // console.log(waypts);
    directionsService.route({
      origin: start,
      destination: end,
      waypoints: waypts,
      optimizeWaypoints: true,
      travelMode: 'DRIVING'
    }, calculateRoute)
  })
};

function calculateRoute(response, status) {
  var directionsDisplay = new google.maps.DirectionsRenderer();
  //console.log(response,status);
  var route = response.routes[0];
  var totalDistance = 0;
  for (var i = 0; i < route.legs.length; i++) {
    totalDistance += parseFloat(route.legs[i].distance.text);
  }
  if (totalDistance < shortestTotalDistance) {
    shortestTotalDistance = totalDistance;
    shortestData = response;
  }
  //console.log(shortestTotalDistance, shortestData);
  //directionsDisplay.setDirections(shortestData);
  return shortestData;
};


function findStoreCoords(storeArr) {
  return storeArr.map(function(el) {
    return {
      lat: parseFloat(el.lat),
      lng: parseFloat(el.long)
    }
  });
};
